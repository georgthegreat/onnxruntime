--- contrib/libs/onnx_runtime/onnxruntime/core/providers/cuda/cuda_provider_factory.cc	(index)
+++ contrib/libs/onnx_runtime/onnxruntime/core/providers/cuda/cuda_provider_factory.cc	(working tree)
@@ -16,7 +16,7 @@
 #include "core/providers/cuda/cuda_allocator.h"
 #include "core/providers/cuda/gpu_data_transfer.h"
 #include "core/providers/cuda/math/unary_elementwise_ops_impl.h"
-#ifndef NDEBUG
+#if 0
 #error #include "core/providers/cuda/test/all_tests.h"
 #endif
 
@@ -183,7 +183,7 @@ struct ProviderInfo_CUDA_Impl : ProviderInfo_CUDA {
     return CUDAExecutionProvider::CreateCudaAllocator(device_id, gpu_mem_limit, arena_extend_strategy, external_allocator_info, default_memory_arena_cfg);
   }
 
-#ifndef NDEBUG
+#if 0
   bool TestAll() override {
     // TestAll is the entry point of CUDA EP's insternal tests.
     // Those internal tests are not directly callable from onnxruntime_test_all
--- contrib/libs/onnx_runtime/onnxruntime/core/providers/cuda/cuda_provider_factory.h	(index)
+++ contrib/libs/onnx_runtime/onnxruntime/core/providers/cuda/cuda_provider_factory.h	(working tree)
@@ -55,7 +55,7 @@ struct ProviderInfo_CUDA {
   virtual std::shared_ptr<onnxruntime::IExecutionProviderFactory> CreateExecutionProviderFactory(const onnxruntime::CUDAExecutionProviderInfo& info) = 0;
   virtual std::shared_ptr<onnxruntime::IAllocator> CreateCudaAllocator(int16_t device_id, size_t gpu_mem_limit, onnxruntime::ArenaExtendStrategy arena_extend_strategy, onnxruntime::CUDAExecutionProviderExternalAllocatorInfo& external_allocator_info, OrtArenaCfg* default_memory_arena_cfg) = 0;
 
-#ifndef NDEBUG
+#if 0
   // This function is the entry point to CUDA EP's internal (aka not accessible from bridge code for shared library)
   // tests and is only called from onnxruntime_test_all. Release builds don't need this function.
   virtual bool TestAll() = 0;
--- contrib/libs/onnx_runtime/onnxruntime/core/providers/cuda/test/cuda_execution_provider_test.cc	(index)
+++ contrib/libs/onnx_runtime/onnxruntime/core/providers/cuda/test/cuda_execution_provider_test.cc	(working tree)
@@ -5,7 +5,7 @@
 // extra code in the core of CUDA EP and that code may
 //  1. slow down performance critical applications and
 //  2. increase binary size of ORT.
-#ifndef NDEBUG
+#if 0
 #include <iostream>
 #error #include "core/providers/cuda/test/all_tests.h"
 #include "core/providers/cuda/cuda_execution_provider.h"
